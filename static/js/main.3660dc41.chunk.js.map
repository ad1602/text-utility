{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","class","onClick","toggleMode","for","TextForm","useState","text","setText","heading","value","onChange","event","target","style","backgroundColor","color","placeholder","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","copy","document","getElementById","select","navigator","clipboard","writeText","split","join","textDecoration","classList","add","fontStyle","filter","element","Math","ceil","display","Alert","height","alert","role","message","defaultProps","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3660dc41.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-dark ${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\"><b>{props.title}</b></a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">About</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div class=\"form-check form-switch\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                            <label class=\"form-check-label text-light\" for=\"flexSwitchCheckDefault\">Enable {props.mode==='dark'?'light':'dark'} mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </div>\r\n    )\r\n}\r\nNavbar.propTypes = { title: PropTypes.string.isRequired }\r\nNavbar.defaultProps = { title: 'set title here' }","\r\nimport React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleOnClick = function () {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase.\",\"Success\");\r\n    }\r\n    const handleOnClick3 = function () {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase.\",\"Success\");\r\n    }\r\n    const handleOnClick2 = function () {\r\n\r\n        setText(\"\");\r\n        props.showAlert(\"Cleared Text.\",\"Success\");\r\n    }\r\n    const handleLineThrough = function () {\r\n        let newText=document.getElementById(\"textbox\").style.textDecoration=\"line-through\";\r\n        setText(newText);\r\n        props.showAlert(\"Converted to line-through text.\",\"Success\");\r\n    }\r\n    const handleBold = function () {\r\n        let newText=document.getElementById(\"textbox\");\r\n        newText.classList.add(\"bold\");\r\n        props.showAlert(\"Converted to bold text.\",\"Success\");\r\n    }\r\n    const handleItalics = function () {\r\n        document.getElementById(\"textbox\").style.fontStyle=\"italic\";\r\n        setText(text);\r\n        props.showAlert(\"Converted to italic text.\",\"Success\");\r\n    }\r\n    \r\n\r\n    const handleCopyText = function () {\r\n        let copy = document.getElementById(\"textbox\");\r\n        copy.select();\r\n        navigator.clipboard.writeText(copy.value);\r\n        props.showAlert(\"Copied text.\",\"Success\");\r\n    }\r\n    const handleExtraSpaces = function () {\r\n        let newText = text.split(/[  ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed extra spaces.\",\"Success\");\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className={`text-${props.mode === 'dark' ? 'light' : 'dark'}`}>\r\n                <div className=\"container my-3\">\r\n                    <h1>{props.heading}</h1>\r\n                    <div className=\"mb-3\">\r\n                        <textarea className=\"form-control\" value={text} id=\"textbox\" onChange={handleOnChange} style={{ backgroundColor: props.mode === 'light' ? 'white' : '#223a2e' ,color: props.mode === 'light' ? 'black' : 'white'}} placeholder=\"put your text here\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleOnClick}>To Upper Case</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleOnClick3}>To Lower Case</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleOnClick2}>Clear Text</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleCopyText}>Copy Text</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleLineThrough}>Strike Through</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleBold}>Bold</button>\r\n                    <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-1\" onClick={handleItalics}>Italics</button>\r\n\r\n                </div>\r\n                <div className=\"container\">\r\n                    <h2>Your text summary:</h2>\r\n                    <p>{text.length} characters<br/> {text.split(\" \").filter((element) => { return element.length !== 0 }).length} words <br /> time to read: {Math.ceil(0.25 * (text.split(\" \").length) - 1)} seconds</p>\r\n                </div>\r\n                <div className=\"container\" style={{display : text.length===0 ?'none': 'block'}}>\r\n                <h2>Your text preview:</h2>\r\n                 <p>{text}</p>\r\n                </div>\r\n            </div>\r\n            <footer className={`text-${props.mode==='dark'?'light':'dark'}`}><p>Made with ❤ By Abhishek</p></footer>\r\n        </>\r\n    )\r\n}\r\n","\r\nimport React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{ height:'50px'}}>\r\n            {\r\n                 props.alert && <div class=\"alert alert-info alert-dismissible fade show\" role=\"alert\">\r\n                                  <strong>{props.alert.type}</strong>:  {props.alert.message}\r\n                                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert'\nimport React, { useState } from 'react'\n\n\n\nfunction App() {\n\n  const [mode,setMode]=useState('light');\n  const [alert,setAlert] = useState(null);\n\n  const showAlert=(message,type)=>{\n     setAlert({\n       message:message,\n       type:type\n     })\n     setTimeout(()=>{\n       setAlert(null);\n     },1800);\n  }\n\n  const toggleMode=()=>{\n    if(mode==='light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor='#045445';\n      showAlert(\"Dark Mode was enabled.\",\"Success\");\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor='#d0e5e2';\n      showAlert(\"Light Mode was enabled.\",\"Success\");\n    }\n  }\n  \n  return (\n    <>\n     <Navbar title=\"textPlay\" mode={mode} toggleMode={toggleMode}/>\n     <Alert alert={alert}/>\n     <TextForm heading=\"Enter Your Text Here\" mode={mode} showAlert={showAlert} />\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}